for QuickSort let's take the following array

    4   6   1   7   3   2   5

    how the quickSort works is that we are going to use a pivot point and we will point
    the first item with that pivot point and compare every item in the array to that number

Consider P as the pivot point and ^ the item it is pointing

    4   6   1   7   3   2   5
    ^
    p

So the pivot point is on first item (4),
    1) when we compare 4 and 6,  6 > 4 so we do nothing and check the next number
    2) when we compare 4 and 1,  4 > 1 
        *Here if we find an item less than the pivot we are going to exchange it with the *FIRST ITEM THAT IS GREATER*
    so the Item will be (which is 6)

    4   1   6   7   3   2   5
    ^
    p   

    3) when we compare 4 and 7,  7 > 4 so we do nothing and check the next number
    4) when we compare 4 and 3,  4 > 3
        So now we exchange this with the FIRST ITEM GREATER THAT IS GREATER (which is 6)

    4   1   3   7   6   2   5
    ^
    p

    4) when we compare 4 and 2,  4 > 2
        So now we exchange this with the FIRST ITEM GREATER THAT IS GREATER (which is 7)

    4   1   3   2   6   7   5
    ^
    p

    5) when we compare 4 and 5,  5 > 4 so we do nothing and Now the loop is finshed

    So we now we swap the pivot value (4) with the LAST ITEM THAT IS LESS THAN(which is 2[the last less than value that was swapped])

     2   1   3   4   6   7   5

     so now the 4 is sorted, so here every this that is LESS than 4 is on the LEFT and every that GREATER than 4 is on the RIGHT 

    so now we are going to run quickSort on just the right section of the array ( 2   1   3 ) and the left section
    of the array ( 6   7   5 ) which are unsorted

    Let's focus on the left side first as the pivot point is on the first item (2)
    
    2   1   3
    ^
    p

    1) when we compare 2 and 1, 2 > 1 
        So now we exchange this with the FIRST ITEM GREATER THAT IS GREATER //Which is still not available
    2) when we compare 2 and 3,  3 > 2 so we don't do anything to that number

    So we now we swap the pivot value (2) with the LAST ITEM THAT IS LESS THAN(which is 1[the last less than value that was swapped/ or wasn't])

    1   2   3

    so now the 2 is sorted

    We will then run 1 and 3 recursively and since each have only one item we know that they are at the correct spot
    and we mark those 2 as sorted


    Now let's focus on the right side next as the pivot point is on the first item (6)

    6   7   5
    ^
    p

    1) when we compare 6 and 7,  7 > 6 so we do nothing and check the next number
    2) when we compare 6 and 5,  6 > 5
        So now we exchange this with the FIRST ITEM GREATER THAT IS GREATER (which is 7)
    
    6   5   7
    ^
    p

    So we now we swap the pivot value (6) with the LAST ITEM THAT IS LESS THAN(which is 5[the last less than value that was swapped])

    5   6   7

    so now the 6 is sorted

    We will then run 5 and 7 recursively and since each have only one item we know that they are at the correct spot
    and we mark those 2 as sorted

    So now we have the array sorted ,

    1   2   3   4   5   6   7