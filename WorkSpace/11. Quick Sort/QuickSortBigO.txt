Let's take the following array

4   6   1   7   3   2   5

when we run pivot it will bring us the following,

2   1   3   4   6   7   5

---SPACE COMPLEXITY---
So the thing to focus is that we didn't introduce any new items here,
we just move things around within the same array.

This is different compared to merge sort as we create new items, therefore
doubles the amount of space in memory

But with this we work with the original array without duplicating any data

SO the SPACE COMPLEXITY is O(1) 
which is kind of an advantage in space compared to other algorithms

---TIME COMPLEXITY---

From the TIME COMPLEXITY perspective in order to move all the above items
we get ->O(n)

because we had a loop that went from the begining of the array all the way through tp the end

and the number of times we had to do the above loop was 3,(working shown below)

2   1   3   [4]   6   7   5     =>  1

[2   1   3]   4   [6   7   5]

[1   2   3]   4   [5   6   7]   =>  2

[1]   2   [3]   4   [5]   6   [7]

1   2   3   4   5   6   7       =>  3

So since we did this 3 time then this is going to be O(log n)

So overall what we did here is O(n log n)

***So O(n log n) is the best case of quickSort***




The WORST CASE happens when we have already sorted array

1   2   3   4   5   6   7

here when we consider the 1st item as the pivot point

1   2   3   4   5   6   7
^
P

we will compare this item(pivot item) with all the other items in the array an that is not going to move

So what we normally do with quickSort is we run quickSort on all the items on the left of it, all the ones
that are less than, and then run it also on everything on the right.

It is the spliting of the array that makes it efficient, but in this case there are no items on the left,
there are only items on the right, so there is no spliting of the array


1  [ 2   3   4   5   6   7]

we get the same when we loop for 2 and beyond

1   2   [3   4   5   6   7]

1   2   3   [4   5   6   7]

1   2   3   4   [5   6   7]

1   2   3   4   5   [6   7]

1   2   3   4   5   6   [7]


So in this circumstance, this is O(n^2)
which is the worst possible senario which big 0 measures

BEST or AVERAGE case would be O(n log n)
WORST case is O(n^2)

So if we have SORTED or ALMOST SORTED algorithm this is not a good sorting algorithm

For Random Data this is an excellent sorting algorithm 
